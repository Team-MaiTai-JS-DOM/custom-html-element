{"version":3,"sources":["../../script/bodies.js"],"names":["Body","colorRange","path","pathFeel","numericalPath","samplers","topBarHeight","numericalPathOriginal","coords","slice","JSParent","originalTopBarHeight","width","height","updateDimensions","currentColorFactor","coloringIn","coloringOut","widhtSampler","heightSampler","colorFactor","clampZeroOne","setAttribute","interpolateColors","newColor","DynamicBarSingleBody","inputParams","inputWidth","inputHeight","inputX","inputBoxNewWidth","inputBoxNewHeight","DoubleBody","firstCavityHeight","heightOfBumb","i","length","bendBarBySamplers","secondBarSamplers","tail","movePathPosition","shapesWallsWidth","dockedNeighbor","dock","redrawSVG","superclass","originalHeight","body","TripleBody","resizeWholeBody","secondCavityHeight","isSecondCallingMe","tail2","floatingTitle","textEl","titleOffsetY","thirdBarSamplers","FixedTopBarDoubleBody","FixedTopBarTripleBody","module","exports"],"mappings":"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","file":"bodies.js","sourcesContent":["////////////////////////////////////////////////////////////////////////\r\n//      BODY\r\n////////////////////////////////////////////////////////////////////////\r\n\r\nclass Body {\r\n    constructor(colorRange, path, pathFeel, numericalPath, samplers, topBarHeight) {\r\n        // Body could be of various color combinations because its childrens will be of various types and colors\r\n        this.colorRange = colorRange;\r\n\r\n        // numerical representation of the path that is easy to blend\r\n        this.numericalPathOriginal = numericalPath.coords.slice(0);     // this one should not be modified....NEVER\r\n        this.numericalPath = numericalPath;     // work and make changes on this array\r\n\r\n        // used to easy references upwards, because if I go upwards like parentElement.parentElement.. it will send me through the DOM and this hierarchy is in JS\r\n        this.JSParent = null;\r\n\r\n        // some of those are never used, sorry, this is not a Mona Lisa\r\n        this.topBarHeight = topBarHeight;\r\n        this.originalTopBarHeight = topBarHeight;\r\n\r\n        this.samplers = samplers;\r\n\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.updateDimensions();\r\n\r\n        // this is the reference to the path that can be used in DOM\r\n        this.path = path;\r\n        this.pathFeel = pathFeel;\r\n\r\n        // color transition variables\r\n        this.currentColorFactor = 0;\r\n        this.coloringIn = false;\r\n        this.coloringOut = false;\r\n    }\r\n\r\n    updateDimensions() {\r\n        this.width = this.numericalPath.coords[this.samplers.widhtSampler];\r\n        this.height = this.numericalPath.coords[this.samplers.heightSampler];\r\n    }\r\n\r\n    updateColorByFactor(colorFactor) {\r\n        this.currentColorFactor = clampZeroOne(colorFactor);\r\n        this.path.setAttribute('style', 'fill:#' + interpolateColors(this.colorRange, this.currentColorFactor));\r\n    }\r\n\r\n    updateColor(newColor) {\r\n        this.path.setAttribute('style', 'fill:' + newColor);\r\n    }\r\n}\r\n\r\nclass DynamicBarSingleBody extends Body {\r\n    constructor(colorRange, path, pathFeel, numericalPath, samplers, inputParams, topBarHeight) {\r\n        super(colorRange, path, pathFeel, numericalPath, samplers, topBarHeight);\r\n        this.inputWidth = inputParams.inputWidth;\r\n        this.inputHeight = inputParams.inputHeight;\r\n        this.inputX = inputParams.inputX;\r\n    }\r\n\r\n    resizeTopBar(inputBoxNewWidth, inputBoxNewHeight) {\r\n\r\n    }\r\n}\r\n\r\nconst DoubleBody = superclass => class extends superclass {\r\n    moveFirstBar(height) {\r\n        this.firstCavityHeight = height - heightOfBumb;\r\n        for (let i = 0; i < this.numericalPathOriginal.length; i++)\r\n            this.numericalPath.coords[i] = this.numericalPathOriginal[i];\r\n\r\n        bendBarBySamplers(this.samplers.secondBarSamplers,\r\n            this.topBarHeight + this.firstCavityHeight,\r\n            this.numericalPathOriginal[this.samplers.secondBarSamplers[2]],\r\n            this);\r\n\r\n        if (this.JSParent.tail !== null) {\r\n            this.JSParent.tail.movePathPosition(this.firstCavityHeight + this.topBarHeight + shapesWallsWidth);\r\n            if (this.JSParent.tail.dockedNeighbor !== null) {\r\n                this.JSParent.tail.dock(this.JSParent.tail.dockedNeighbor);\r\n            }\r\n        }\r\n\r\n        redrawSVG(this.JSParent);\r\n    }\r\n}\r\n\r\nfunction bendBarBySamplers(samplers, height, originalHeight, body) {\r\n    for (let i = 0; i < samplers.length; i++) {\r\n        body.numericalPath.coords[samplers[i]] = (body.numericalPathOriginal[samplers[i]] + (height - originalHeight));\r\n    }\r\n}\r\n\r\nconst TripleBody = superclass => class extends superclass {\r\n\r\n    moveFirstBar(height) {\r\n        this.firstCavityHeight = height - heightOfBumb;\r\n        this.resizeWholeBody(false);\r\n    }\r\n\r\n    moveSecondBar(height) {\r\n        this.secondCavityHeight = height - heightOfBumb;\r\n        this.resizeWholeBody(true);\r\n    }\r\n\r\n    resizeWholeBody(isSecondCallingMe) {\r\n        for (let i = 0; i < this.numericalPathOriginal.length; i++)\r\n            this.numericalPath.coords[i] = this.numericalPathOriginal[i];\r\n\r\n        bendBarBySamplers(this.samplers.secondBarSamplers,\r\n            this.topBarHeight + this.firstCavityHeight,\r\n            this.numericalPathOriginal[this.samplers.secondBarSamplers[2]],\r\n            this);\r\n\r\n        if (this.JSParent.tail2 !== null) {\r\n            this.JSParent.tail2.movePathPosition(this.firstCavityHeight + this.topBarHeight + shapesWallsWidth);\r\n            if (this.JSParent.tail2.dockedNeighbor !== null && !isSecondCallingMe) {\r\n                this.JSParent.tail2.dock(this.JSParent.tail2.dockedNeighbor);\r\n            }\r\n        }\r\n\r\n        this.JSParent.floatingTitle.textEl.setAttribute('y', this.topBarHeight + this.firstCavityHeight + titleOffsetY);\r\n\r\n        bendBarBySamplers(this.samplers.thirdBarSamplers,\r\n            this.topBarHeight + this.firstCavityHeight + shapesWallsWidth + this.secondCavityHeight,\r\n            this.numericalPathOriginal[this.samplers.thirdBarSamplers[2]],\r\n            this);\r\n\r\n        if (this.JSParent.tail !== null) {\r\n            this.JSParent.tail.movePathPosition(this.firstCavityHeight + this.topBarHeight + this.secondCavityHeight + shapesWallsWidth * 2);\r\n            if (this.JSParent.tail.dockedNeighbor !== null) {\r\n                this.JSParent.tail.dock(this.JSParent.tail.dockedNeighbor);\r\n            }\r\n        }\r\n\r\n        redrawSVG(this.JSParent);\r\n    }\r\n}\r\n\r\nclass FixedTopBarDoubleBody extends DoubleBody(Body) {\r\n    constructor(colorRange, path, pathFeel, numericalPath, samplers, topBarHeight) {\r\n        super(colorRange, path, pathFeel, numericalPath, samplers, topBarHeight);\r\n    }\r\n}\r\n\r\nclass FixedTopBarTripleBody extends TripleBody(Body) {\r\n    constructor(colorRange, path, pathFeel, numericalPath, samplers, topBarHeight) {\r\n        super(colorRange, path, pathFeel, numericalPath, samplers, topBarHeight);\r\n    }\r\n}\r\n\r\nif (typeof module !== 'undefined') {\r\n    module.exports = (function(){\r\n        return [\r\n            Body,\r\n            DynamicBarSingleBody,\r\n            DoubleBody,\r\n            TripleBody,\r\n            FixedTopBarDoubleBody,\r\n            FixedTopBarTripleBody\r\n        ];\r\n    })();\r\n}\r\n"]}